<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_PlayerIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Player

godMode = false;
crouched = false;
depth = 0;

checkpoint_x = obj_Player_Respawn.x;
checkpoint_y = obj_Player_Respawn.y;

// Current Health/mana
global.Stamina = 100;
global.Mana = 100;
invincible = false; 

// Max Health/Mana
global.max_Stamina = 100;
global.max_Mana    = 100;

playerGravity = 2;
movementSpeed = 5;
horizontalSpeed = 0;
verticalSpeed = 0;
jumpSpeed =  8;
image_speed = .2;

// -1 In Use
// 0 Cannot Use
// 1 Ready To Use 
attacking = false;
canAttack = true;
canJump = 1; // true
canTeleport = 1;

//0 Left Facing
//1 Right Facing
playerDirection = 0;

// Spell Select
// pull = 0
// fireball = 1
// stone = 2
spellIndex = 0;
life_pull_cost = 35;
fireball_cost = 25;
stone_cost = 15;

// Have the spell?
haveSpell[0] = true; // life pull
haveSpell[1] = false; // fireball
haveSpell[2] = false; // stoned

// Cost of Spell
cost[0] = life_pull_cost
cost[1] = fireball_cost;
cost[2] = stone_cost;

// Dmg of Spell
dmg[0] = 25; // Life Transfer
dmg[1] = 50; // Fireball Dmg
dmg[2] = 0;

x = 640;
y = 608;
room_goto(6)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>5 * room_speed</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>11</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_message(canJump);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check Teleport Cooldown
if (!collision_rectangle(x - (sprite_width/2), y + sprite_height, x + (sprite_width/2), y, obj_RoomTeleport, false, false))
{
    //If not colliding with a teleport
    canTeleport = 1;
}
else
{
    //Reset alarm to try again
    alarm[10] = 10; 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset knockedback
speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Melee CD
canAttack = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>541</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sprite_set</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>5</kind>
            <sprite>spr_PlayerDuck</sprite>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>.2</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Resets Attacking Variables

//canAttack = true
attacking = false;
alarm[5] = room_speed/6;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>invincible</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>false</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canAttack</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>true</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Jump Alarm
if (canJump == -1)
{
    //If Jumping, start falling
    canJump = 0;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Health check and mana regen

if (godMode){
    global.Stamina = global.max_Stamina;
    global.Mana = global.max_Mana;
}

if( global.Stamina &lt;= 0 ){
    audio_play_sound(snd_Death, 10, false); 
    show_message("You died");
    x = checkpoint_x;
    y = checkpoint_y;
    global.Stamina = global.max_Stamina;
    global.Mana = global.max_Mana;
    room_restart();
}   

if( global.Mana &lt; global.max_Mana )
    global.Mana += .1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Process Player Input
//These are the variables used to check for player input. 
//Key inputs get the present state of the input;
//Pressed inputs are booleans values that return true if the input is being recieved in the current frame.


// Movement
keyMoveLeft = (keyboard_check(ord('A')) || keyboard_check(vk_left));
keyMoveRight = keyboard_check(ord('D')) || keyboard_check(vk_right);
keyJump = keyboard_check_pressed(ord('W')) || keyboard_check_pressed(vk_space);
pressedJump = keyboard_check_pressed(ord('W')) || keyboard_check_pressed(vk_space);
keyCrouch =  keyboard_check(ord('S')) || keyboard_check(ord('vk_control'));
pressedCrouch = keyboard_check_pressed(ord('S')) || keyboard_check_pressed('vk_control');

// Melee Attack
keyAttack = mouse_check_button(mb_left) || keyboard_check(ord('J'));
pressedAttack = mouse_check_button_pressed(mb_left) || keyboard_check_pressed('J');

// Spell Attack
keyUseSpell = mouse_check_button(mb_right) || keyboard_check(ord('K'));
pressedUseSpell = mouse_check_button_pressed(mb_right) || keyboard_check_pressed('K');

// Spell Switch (with Q or mousewheel)
keySpellSwitch = keyboard_check(ord('Q')); 
pressedSpellSwitch =  keyboard_check_pressed(ord('Q')) || mouse_wheel_down() || mouse_wheel_up();


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Execute Player Movement
horizontalSpeed = (-keyMoveLeft + keyMoveRight) * movementSpeed;
bbox_width = bbox_right - bbox_left;

if( !crouched &amp;&amp; alarm[9] == -1){
    //Horizontal Collision
    if( !attacking ){
    var move = sign(horizontalSpeed); // hoaaaaaaw far we move in the horizontal direction
    repeat(abs(ceil(horizontalSpeed))){ 
        // if the next position is free, move there
        if (place_free(x+move,y)){
            x += move;
        } else { // If the next position isn't free, stop.
            horizontalSpeed = 0;
            break;
        }
    }
    }
    
    //Vertical Collision
    var move = sign(verticalSpeed); // how far we move in the vertical direction
    repeat(abs(ceil(verticalSpeed))){
        // if the next position is free, move there
        if (place_free(x,y+move)){
            y += move;
        } else { // If the next position isn't free, stop.
            verticalSpeed = 0;
            break;
        }
    }
}    

//Platform Collision
if (place_meeting(x, y+1, obj_Collision)) {
    //Standing on a Solid Surface
    canJump = 1;
    verticalSpeed = keyJump * -jumpSpeed;
    
    if (pressedJump &amp;&amp; (canJump == 1)){
        //Start Jumping
        canJump = -1; 
        alarm[0] = .1 * room_speed;
    }
} else {
    //Falling
    //Limit Player Gravity
    canJump = 0;
    if (verticalSpeed &lt; 12) verticalSpeed += playerGravity;  
}

if(canJump = -1){
    //Jumping
    audio_play_sound(snd_Jump, 10, false); 
    verticalSpeed -= jumpSpeed;
}



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///UpdatePlayerSprite
moving = (-keyMoveLeft + keyMoveRight);

if( !attacking &amp;&amp; !crouched){

    if (moving != 0){
        //Moving
        image_xscale = moving;
    }
    
    if (place_meeting(x, y+1, obj_Collision)){
        //Standing On Solid Ground
        if (moving != 0) {
            sprite_index = spr_PlayerRun;
        }else{
            sprite_index = spr_PlayerIdle;
        }
    } else {
        //In The Air
        if (canJump == -1){
            //Jumping
            sprite_index = spr_PlayerJump;
        } else if (canJump == 0){
            //Falling
            sprite_index = spr_PlayerFall;
        } else{
            //Unknown
            sprite_index = spr_PlayerIdle;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Actions

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_MessageTrigger">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (playerDirection == 0)
{
    //Going Left
    x += 64;
}
else
{
    //Going Right;
    x -= 64;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_FireballTrap">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Damage Player by Fireball Trap
if( !invincible ){
    audio_play_sound(snd_Player_Getting_Hit, 10, false); 
    global.Stamina -= 15;
    invincible = true;
    alarm[2] = room_speed*.25;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Mage_Fireball">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Damage Player by Mage Fireball
if( !invincible ){
    audio_play_sound(snd_Player_Getting_Hit, 10, false); 
    global.Stamina -= 15;
    invincible = true;
    alarm[2] = room_speed*.25;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Skeleton">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Damage Player
if( !invincible ){
    audio_play_sound(snd_Player_Getting_Hit, 10, false); 
    global.Stamina -= 10;
    invincible = true;
    alarm[2] = room_speed*.25;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Bat">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Damage Player
if( !invincible ){
    audio_play_sound(snd_Player_Getting_Hit, 10, false); 
    global.Stamina -= 5;
    invincible = true;
    alarm[2] = room_speed*.25;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Boss_Fireball">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Damage Player by Boss Fireball
if( !invincible ){
    audio_play_sound(snd_Player_Getting_Hit, 10, false); 
    global.Stamina -= 15;
    invincible = true;
    alarm[2] = room_speed*.25;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Boss_Whirlwind">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Damage Player by Boss Melee
if( !invincible ){
    audio_play_sound(snd_Player_Getting_Hit, 10, false); 
    global.Stamina -= 25;
    invincible = true;
    alarm[2] = room_speed * .25;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Boss_Attack">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Damage Player by Boss Melee
if( !invincible ){
    audio_play_sound(snd_Player_Getting_Hit, 10, false); 
    global.Stamina -= 15;
    invincible = true;
    alarm[2] = room_speed * .25;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="61">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Change spell array

if ( spellIndex == 0 ) {
    spellIndex = 1;
} else if ( spellIndex = 1 ) {
    spellIndex = 2;
} else {
    spellIndex = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="60">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Change spell array

if ( spellIndex == 0 ) {
    spellIndex = 2;
} else if ( spellIndex = 2 ) {
    spellIndex = 1;
} else {
    spellIndex = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Spell code
var inst

// Standing up Spell Casting
if ( global.Mana &gt;= cost[spellIndex] &amp;&amp; crouched == false ){
    canAttack = false;
    attacking = true;
    alarm[3] = room_speed/4;
    // if the current spell is the life pull, use it
    if ( spellIndex == 0 ) {
        sprite_index = spr_PlayerSpell;
        global.Mana -= life_pull_cost;
        // if the image is facing right, spawn a right facing life pull
        if ( image_xscale &gt; 0 ) {
            inst = instance_create( x + 20 , y - 40, obj_Lifepull );
            with ( inst ) {
                direction = 0;
            }
        
        // otherwise spawn a left facing life pull
        } else {
            inst = instance_create( x - 20 , y - 40, obj_Lifepull );
            with ( inst ) {
                direction = 180;
                image_xscale = -1;
            }
        }
        
    // else if the current spell is the death ball, use it
    } else if ( spellIndex == 1 &amp;&amp; haveSpell[1] ) {
        sprite_index = spr_PlayerSpell;
        global.Mana -= fireball_cost;
        // if the image is facing right, spawn a right facing death ball
         if ( image_xscale &gt; 0 ) {
            inst = instance_create( x - 10  , y - 50, obj_Deathball );
            with ( inst ) {
                speed = 8;
                direction = 0;
            }
         
         // otherwise spawn a left facing death ball
        } else {
            inst = instance_create( x - 35 , y - 50, obj_Deathball );
            with ( inst ) {
                speed = 10;
                direction = 180;
            } 
        }
    
    // otherwise spawn a stone spell
    } else if( spellIndex == 2 &amp;&amp; haveSpell[2]) {
        sprite_index = spr_PlayerGorgonEye;
        global.Mana -= stone_cost;
        // if the image is facing right, spawn right facing
        if ( image_xscale &gt; 0 ) {
            inst = instance_create( x + 18  , y - 40, obj_Stoner );
            inst.image_xscale = 2;
        
        // otherwise spawn left facing
        } else {
            inst = instance_create( x - 18 , y - 40, obj_Stoner );
            inst.image_xscale = -2;
        }
        
    } else {} 

// Crouched Spell Casting    
} else if(global.Mana &gt;= cost[spellIndex] &amp;&amp; crouched == true ){
    canAttack = false;
    attacking = true;
    alarm[3] = room_speed/4;
    alarm[4] = room_speed/3;
    // if the current spell is the life pull, use it
    if ( spellIndex == 0 ) {
        sprite_index = spr_PlayerSpell_Low;
        global.Mana -= life_pull_cost;
        // if the image is facing right, spawn a right facing life pull
        if ( image_xscale &gt; 0 ) {
            inst = instance_create( x + 20 , y - 35, obj_Lifepull );
            with ( inst ) {
                direction = 0;
            }
        
        // otherwise spawn a left facing life pull
        } else {
            inst = instance_create( x - 20 , y - 35, obj_Lifepull );
            with ( inst ) {
                direction = 180;
                image_xscale = -1;
            }
        }
        
    // else if the current spell is the death ball, use it
    } else if ( spellIndex == 1 &amp;&amp; haveSpell[1] ) {
        sprite_index = spr_PlayerSpell_Low;
        global.Mana -= fireball_cost;
        // if the image is facing right, spawn a right facing death ball
         if ( image_xscale &gt; 0 ) {
            inst = instance_create( x - 10 , y - 35, obj_Deathball );
            with ( inst ) {
                speed = 8;
                direction = 0;
            }
         
         // otherwise spawn a left facing death ball
        } else {
            inst = instance_create( x - 35 , y - 35, obj_Deathball );
            with ( inst ) {
                speed = 10;
                direction = 180;
            } 
        }
    
    // otherwise spawn a stone spell
    } else if( spellIndex == 2 &amp;&amp; haveSpell[2]) {
        sprite_index = spr_PlayerGorgonEye_Low;
        global.Mana -= stone_cost;
        // if the image is facing right, spawn right facing
        if ( image_xscale &gt; 0 ) {
            inst = instance_create( x + 18 , y - 30, obj_Stoner );
            inst.image_xscale = 2;
            
        // otherwise spawn left facing
        } else {
            inst = instance_create( x - 18 , y - 30, obj_Stoner );
            inst.image_xscale = -2;
        }
        
    } else {} 
} else {}


if( global.Mana &lt;= 0 )
    global.Mana = 0;
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Melee
// If player hit attack &amp;&amp; canAttack right now
if( canAttack &amp;&amp; alarm[3] == -1 &amp;&amp; alarm[5] == -1 ){
    horizontalSpeed = 2;
    crouched = false; // change if you want to have a sweep attack
    sprite_index = spr_Player_Attack;
    
    if( image_xscale &gt; 0 ){
        instance_create(x + 15,y,obj_Player_Attack);
    } else { 
        instance_create(x - 15,y,obj_Player_Attack);
    }   
       
    canAttack = false;
    attacking = true;
    alarm[3] = room_speed/8;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>-1</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>canTeleport</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go To Room Entrance
//Positions the player at the room entrance used
if (instance_exists(global.dest_id))
{
    if ((global.dest_id).teleportDirection == 0)
    {
            //Teleport facing left
            x = (global.dest_id).x - 64;
            y = (global.dest_id).y + 96;
    }
    else
    {
            //Teleport facing right
            x = (global.dest_id).x + 64;
            y = (global.dest_id).y + 96;
    }

}
else
{
    x = x;
    y = y;
}
alarm[10] = 10;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>room == Main_Menu</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Activate God Mode
godMode = true;
haveSpell[0] = true;
haveSpell[1] = true;
haveSpell[2] = true;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>332</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="9" enumb="87">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// unDuck / Jump
crouched = false; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="83">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Duck

if( crouched == false &amp;&amp; canJump == 1 ){
    speed = 0;
    crouched = true; 
    sprite_index = spr_PlayerDuck;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="76">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Change spell array

if ( spellIndex == 0 ) {
    spellIndex = 2;
} else if ( spellIndex = 2 ) {
    spellIndex = 1;
} else {
    spellIndex = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Spell code
var inst

// Standing up Spell Casting
if ( global.Mana &gt;= cost[spellIndex] &amp;&amp; crouched == false ){
    canAttack = false;
    attacking = true;
    alarm[3] = room_speed/4;
    // if the current spell is the life pull, use it
    if ( spellIndex == 0 ) {
        sprite_index = spr_PlayerSpell;
        global.Mana -= life_pull_cost;
        // if the image is facing right, spawn a right facing life pull
        if ( image_xscale &gt; 0 ) {
            inst = instance_create( x + 20 , y - 40, obj_Lifepull );
            with ( inst ) {
                direction = 0;
            }
        
        // otherwise spawn a left facing life pull
        } else {
            inst = instance_create( x - 20 , y - 40, obj_Lifepull );
            with ( inst ) {
                direction = 180;
                image_xscale = -1;
            }
        }
        
    // else if the current spell is the death ball, use it
    } else if ( spellIndex == 1 &amp;&amp; haveSpell[1] ) {
        sprite_index = spr_PlayerSpell;
        global.Mana -= fireball_cost;
        // if the image is facing right, spawn a right facing death ball
         if ( image_xscale &gt; 0 ) {
            inst = instance_create( x - 10  , y - 50, obj_Deathball );
            with ( inst ) {
                speed = 8;
                direction = 0;
            }
         
         // otherwise spawn a left facing death ball
        } else {
            inst = instance_create( x - 35 , y - 50, obj_Deathball );
            with ( inst ) {
                speed = 10;
                direction = 180;
            } 
        }
    
    // otherwise spawn a stone spell
    } else if( spellIndex == 2 &amp;&amp; haveSpell[2]) {
        sprite_index = spr_PlayerGorgonEye;
        global.Mana -= stone_cost;
        // if the image is facing right, spawn right facing
        if ( image_xscale &gt; 0 ) {
            inst = instance_create( x + 18  , y - 40, obj_Stoner );
            inst.image_xscale = 2;
        
        // otherwise spawn left facing
        } else {
            inst = instance_create( x - 18 , y - 40, obj_Stoner );
            inst.image_xscale = -2;
        }
        
    } else {} 

// Crouched Spell Casting    
} else if(global.Mana &gt;= cost[spellIndex] &amp;&amp; crouched == true ){
    canAttack = false;
    attacking = true;
    alarm[3] = room_speed/4;
    alarm[4] = room_speed/3;
    // if the current spell is the life pull, use it
    if ( spellIndex == 0 ) {
        sprite_index = spr_PlayerSpell_Low;
        global.Mana -= life_pull_cost;
        // if the image is facing right, spawn a right facing life pull
        if ( image_xscale &gt; 0 ) {
            inst = instance_create( x + 20 , y - 35, obj_Lifepull );
            with ( inst ) {
                direction = 0;
            }
        
        // otherwise spawn a left facing life pull
        } else {
            inst = instance_create( x - 20 , y - 35, obj_Lifepull );
            with ( inst ) {
                direction = 180;
                image_xscale = -1;
            }
        }
        
    // else if the current spell is the death ball, use it
    } else if ( spellIndex == 1 &amp;&amp; haveSpell[1] ) {
        sprite_index = spr_PlayerSpell_Low;
        global.Mana -= fireball_cost;
        // if the image is facing right, spawn a right facing death ball
         if ( image_xscale &gt; 0 ) {
            inst = instance_create( x - 10 , y - 35, obj_Deathball );
            with ( inst ) {
                speed = 8;
                direction = 0;
            }
         
         // otherwise spawn a left facing death ball
        } else {
            inst = instance_create( x - 35 , y - 35, obj_Deathball );
            with ( inst ) {
                speed = 10;
                direction = 180;
            } 
        }
    
    // otherwise spawn a stone spell
    } else if( spellIndex == 2 &amp;&amp; haveSpell[2]) {
        sprite_index = spr_PlayerGorgonEye_Low;
        global.Mana -= stone_cost;
        // if the image is facing right, spawn right facing
        if ( image_xscale &gt; 0 ) {
            inst = instance_create( x + 18 , y - 30, obj_Stoner );
            inst.image_xscale = 2;
            
        // otherwise spawn left facing
        } else {
            inst = instance_create( x - 18 , y - 30, obj_Stoner );
            inst.image_xscale = -2;
        }
        
    } else {} 
} else {}


if( global.Mana &lt;= 0 )
    global.Mana = 0;
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="74">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Melee
// If player hit attack &amp;&amp; canAttack right now
if( canAttack &amp;&amp; alarm[3] == -1 &amp;&amp; alarm[5] == -1 ){
    horizontalSpeed = 2;
    crouched = false; // change if you want to have a sweep attack
    sprite_index = spr_Player_Attack;
    
    if( image_xscale &gt; 0 ){
        instance_create(x + 15,y,obj_Player_Attack);
    } else { 
        instance_create(x - 15,y,obj_Player_Attack);
    }   
       
    canAttack = false;
    attacking = true;
    alarm[3] = room_speed/8;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="69">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Change spell array

if ( spellIndex == 0 ) {
    spellIndex = 1;
} else if ( spellIndex = 1 ) {
    spellIndex = 2;
} else {
    spellIndex = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="51">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>spellIndex</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>2</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="50">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>spellIndex</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="49">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>spellIndex</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Duck

if( crouched == false &amp;&amp; canJump == 1 ){
    speed = 0;
    crouched = true; 
    sprite_index = spr_PlayerDuck;
} else {
    crouched = false;
}    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="83">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stand Up
crouched = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
